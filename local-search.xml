<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo + Github 零成本搭建个人博客</title>
    <link href="/2022/06/02/front-end/hexo-github-ling-cheng-ben-da-jian-ge-ren-bo-ke/"/>
    <url>/2022/06/02/front-end/hexo-github-ling-cheng-ben-da-jian-ge-ren-bo-ke/</url>
    
    <content type="html"><![CDATA[<p>Hexo 是一个静态博客框架，其依赖于 Node.js，支持 Markdown 格式撰写文章，通过渲染引擎，在本地生成静态网页。然后我们可以通过 Github 提供的网站托管服务 Github pages ，公开发布网页。以这种组合方式搭建的博客网站特点是：</p><ul><li>原始文章在本地创建生成，相当于自动在本地备份，且可随时借助 Markdown 编辑工具在本地预览查看。</li><li>生成静态网页格式，对网站服务器要求低，节约了服务器的购买成本和降低了服务器的配置要求，甚至可以直接部署于 Github、Gitee 等免费提供的网站托管服务上。</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客上线了</title>
    <link href="/2022/05/26/life/ge-ren-bo-ke-shang-xian-liao/"/>
    <url>/2022/05/26/life/ge-ren-bo-ke-shang-xian-liao/</url>
    
    <content type="html"><![CDATA[<h3 id="博客主体完成"><a href="#博客主体完成" class="headerlink" title="博客主体完成"></a>博客主体完成</h3><p>经过一个多星期的折腾，个人博客终于建成基本框架，成功上线了！   </p><blockquote><p>本博客采用 <a href="https://hexo.io/">HEXO</a> 框架，主题为 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>，通过 <a href="https://github.com/">GitHub Pages</a> 进行部署，采用响应式布局，可以同时适配手机、平板或电脑屏幕。   </p></blockquote><p>博客站名初定为<strong>云飞阁</strong>，我对这个名字还不是很满意，后面想到更好的再说吧，也欢迎大家提出宝贵意见。<br>挑选站名的时候，以下这些站名曾列入候选：</p><table><thead><tr><th>类别</th><th>站名</th><th>站名</th><th>站名</th></tr></thead><tbody><tr><td>三字</td><td>飞云轩</td><td>飞云阁</td><td>云飞阁</td></tr><tr><td></td><td>云飞处</td><td>云飞扬</td><td>云飞说</td></tr><tr><td>四字</td><td>云飞小栈</td><td>云飞笔记</td><td>闲看云飞</td></tr><tr><td></td><td>云起飞扬</td><td>坐看云飞</td><td>博客云飞</td></tr><tr><td>其它</td><td>云博</td><td>云飞的博客</td><td>云飞Blog</td></tr></tbody></table><h3 id="下一步打算"><a href="#下一步打算" class="headerlink" title="下一步打算"></a>下一步打算</h3><p>框架搭建好了，下一步就是充实内容了，博客的主要板块现在设想开设以下三个：<em><strong>生活随笔，手机开发，前端设计</strong></em>。<br>至于正式的第一篇文章，我已经想好了，就把这个博客网站的搭建过程写下来吧。</p><p>因为现在暂时没有自己的文章，先转载几篇大佬的文章到这里，来自杜瑶的 <a href="http://blog.doyoe.com/">CSS探索之旅</a>，为什么选择转载杜瑶，原因有二：</p><ol><li>我现在正在努力学习前端技术，前端基础三剑客 Html, CSS, JS 里面，最弱的就是 CSS；</li><li>在搭建博客网站的过程中，我是在看到了杜瑶的博客 “CSS探索之旅” 之后，才最终确定采用 HEXO 框架技术。</li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>好了，写这篇的主要目的，是熟悉 HEXO 的博文发布方式，还有 MarkDown 的写法，一篇博文常用到的标题、正文、链接、引用、列表、表格、加粗、斜体，都已经有了，对了，还有图片功能没有写到，以下是图片测试：<br><img src="/img/weixin.png" alt="微信" title="快速找到我，欢迎添加我的微信">    </p><p>注：HEXO 本质上是以静态网页方式部署的，没有交互功能，本站的留言功能是采用插件方式的第三方留言系统，微信中常加载失败，遇此情况时，请使用手机浏览器或在电脑上浏览本站。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS：置换和非置换元素</title>
    <link href="/2015/03/15/css/css-zhi-huan-he-fei-zhi-huan-yuan-su/"/>
    <url>/2015/03/15/css/css-zhi-huan-he-fei-zhi-huan-yuan-su/</url>
    
    <content type="html"><![CDATA[<p>本文转载自CSS大佬杜瑶的<a href="http://blog.doyoe.com/">CSS探索之旅</a></p><h2 id="先进一个题外话"><a href="#先进一个题外话" class="headerlink" title="先进一个题外话"></a>先进一个题外话</h2><p>在面试一个 <code>重构</code>（各大公司的叫法可能不太一样）时，我喜欢从一个点开始问，然后一直延展下去成为一条线，甚至是一个面，直到问到不会的地方，然后又换另外一个点。</p><blockquote><p>例如：我可能会说，能简单聊聊 <code>行内级元素</code> 和 <code>块级元素</code> 的区别吗。</p></blockquote><p>一般这时，候选人都会说到 <code>行内级元素</code> 不会换新行，而 <code>块级元素</code> 会格式化为块状，即换行。但也有些遗憾的方面（如：<a href="/2015/03/09/css/%E8%A7%86%E8%A7%89%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E6%A1%86/#block-level-element">混淆了块元素和块级元素，行内元素和行内级元素</a>），当然这看起来似乎不是特别重要。</p><blockquote><p>这时我会继续问，<code>行内元素</code> 能够定义宽度和高度吗？</p></blockquote><p>不少候选人会说：<strong>不能</strong></p><blockquote><p>我会继续问，说几个你熟悉的 <code>行内元素</code> 吧</p></blockquote><p>于是 <code>span</code>, <code>strong</code>, <code>em</code>, <code>ins</code>… 答案我还是比较满意的。</p><blockquote><p>我仍然会继续，<code>img</code> 是行内元素么？</p></blockquote><p>候选人这时通常会迟疑一下，可能意识到我接下来想问啥了，但还是会回答：<strong>是</strong></p><span id="more"></span><blockquote><p>于是我会说，那 <code>img</code> 能定义宽度和高度么？</p></blockquote><p>有的候选人这时会犹豫，因为如果回答是，就会推翻他之前说的 <code>行内元素不能定义宽高</code>，如果回答不是，似乎又和他所熟知的经验不一致。但通常最后还是会回答：<strong>能</strong></p><blockquote><p>那我就又得问，你之前不是说 <code>行内元素不能定义宽高</code> 吗？为什么 <code>img</code> 可以？</p></blockquote><p>到这里，候选人基本上不知道要怎么回答好了，最后可能会告诉我，<strong>因为 <code>img</code> 是特殊元素</strong></p><p>当然，虽然这么回答也不能说是错误的，但基本上也能知道候选人对这条线的基础的掌握程度了。</p><p>但我希望听到的答案是通过解释置换元素相关的概念从而给出答案。</p><h2 id="什么是置换元素？"><a href="#什么是置换元素？" class="headerlink" title="什么是置换元素？"></a>什么是置换元素？</h2><p>一个 <code>内容</code> 不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。</p><h2 id="什么是非置换元素？"><a href="#什么是非置换元素？" class="headerlink" title="什么是非置换元素？"></a>什么是非置换元素？</h2><p>w3c并没有给出明确的非置换元素的解释，但能确定的是除置换元素之外，所有的元素都是非置换元素。</p><h2 id="行内级置换和非置换元素的宽度定义"><a href="#行内级置换和非置换元素的宽度定义" class="headerlink" title="行内级置换和非置换元素的宽度定义"></a>行内级置换和非置换元素的宽度定义</h2><p>对于行内级非置换元素，宽度设置是不适用的。</p><p>对于行内级置换元素来说，其宽度的设置需遵循以下几点：</p><ul><li>若宽高的计算值都为 <code>auto</code> 且元素有固有宽度，则 <code>width</code> 的使用值为该固有宽度；<blockquote><p>典型的例子是：拥有默认宽高的 <code>input</code> 当宽度的计算值为auto时，则宽度使用值为其默认的固有宽度</p></blockquote></li><li>若宽度的计算值为 <code>auto</code> 且元素有固有宽度，则 <code>width</code> 的使用值为该固有宽度；<blockquote><p>例子同上</p></blockquote></li><li>若宽度的计算值为 <code>auto</code> 且高度有 <code>非auto</code> 的计算值，并且元素有固有宽高比，则 <code>width</code> 的使用值为 <code>高度使用值 * 固有宽高比</code>；<blockquote><p>典型的例子：<code>img</code> 当只定义了其高度值时，其宽度将会根据固有宽高比进行等比设置</p></blockquote></li><li>除此之外，当 <code>width</code> 的计算值为 <code>auto</code> 时，则宽度的使用值为 <code>300px</code><blockquote><p>典型的例子：比如iframe, canvas</p></blockquote></li></ul><p>其它类型的置换元素，其宽度的定义都参照行内置换元素的定义。</p><h2 id="行内级置换和非置换元素的高度定义"><a href="#行内级置换和非置换元素的高度定义" class="headerlink" title="行内级置换和非置换元素的高度定义"></a>行内级置换和非置换元素的高度定义</h2><p>对于行内级非置换元素，高度设置是不适用的。</p><p>对于行内级置换元素来说，其高度的设置需遵循以下几点：</p><ul><li>若宽高的计算值都为 <code>auto</code> 且元素有固有高度，则 <code>height</code> 的使用值为该固有高度；</li><li>若高度的计算值为 <code>auto</code> 且元素有固有高度，则 <code>height</code> 的使用值为该固有高度；</li><li>若高度的计算值为 <code>auto</code> 且宽度有 <code>非auto</code> 的计算值，并且元素有固有宽高比，则 <code>height</code> 的使用值为：<code>宽度使用值 / 固有宽高比</code>；</li><li>若高度的计算值为 <code>auto</code> 且上述条件完全不符，则 <code>height</code> 的使用值 <code>不能大于150px</code>，且宽度不能大于长方形高度的2倍。</li></ul><p>其它类型的置换元素，其高度的定义都参照行内置换元素的定义。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w3c</tag>
      
      <tag>视觉格式化模型</tag>
      
      <tag>置换元素</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>margin系列之外边距折叠</title>
    <link href="/2013/12/04/css/margin-xi-lie-zhi-wai-bian-ju-zhe-die/"/>
    <url>/2013/12/04/css/margin-xi-lie-zhi-wai-bian-ju-zhe-die/</url>
    
    <content type="html"><![CDATA[<p>本文转载自CSS大佬杜瑶的<a href="http://blog.doyoe.com/">CSS探索之旅</a></p><h2 id="不怀疑你也在工作中遇见过"><a href="#不怀疑你也在工作中遇见过" class="headerlink" title="不怀疑你也在工作中遇见过"></a>不怀疑你也在工作中遇见过</h2><p>几乎可以不用怀疑，前端工作中的你一定遇见过 <code>margin</code> 折叠。</p><p>不确定？别着急，你可能写过这样的代码：</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个华丽的段落，别看我文字少<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是另一个华丽的段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>大家觉得这 <code>2p</code> 之间会发生点什么？是会合体呢？还是分开？来看看 <code>DEMO1</code> <a href="http://demo.doyoe.com/css/margin/collapse-margin.htm">margin折叠</a></p><span id="more"></span><p>好吧，它们真的合体了。按照常规思路，这 <code>2p</code> 之间的空白应该是第一个 <code>p</code> 的 <code>margin-bottom</code> 50px 加上第二 <code>p</code> 的 <code>margin-top</code> 50px，即 <code>50 + 50px = 100px</code> ，但结果总是出乎意料不是么？它们之间只剩下了 <code>50px</code>，这就是 <code>margin折叠</code>。所以任何人遇见过我都不会觉得意外，因为这样的Code看起来没有任何问题。</p><h2 id="它们之间到底发生了些什么？"><a href="#它们之间到底发生了些什么？" class="headerlink" title="它们之间到底发生了些什么？"></a>它们之间到底发生了些什么？</h2><p>这 <code>2p</code> 内部到底发生了什么，才会有这样的表现？</p><p>早在CSS1中就有对 <code>margin</code> 折叠的说明，我们来看看：</p><blockquote><p>原文：The width of the margin on non-floating block-level elements specifies the minimum distance to the edges of surrounding boxes. Two or more adjoining vertical margins (i.e., with no border, padding or content between them) are collapsed to use the maximum of the margin values. In most cases, after collapsing the vertical margins the result is visually more pleasing and closer to what the designer expects.</p></blockquote><blockquote><p>翻译：外边距用来指定非浮动元素与其周围盒子边缘的最小距离。两个或两个以上的相邻的垂直外边距会被折叠并使用它们之间最大的那个外边距值。多数情况下，折叠垂直外边距可以在视觉上显得更美观，也更贴近设计师的预期。</p></blockquote><p>从这段话中，我们能获得一些有用的信息：</p><ul><li>发生折叠需要是相邻的非浮动元素；</li><li>折叠发生在垂直外边距上，即margin-top&#x2F;margin-bottom；</li><li>折叠后取其中最大的那个margin值作为最终值；</li></ul><p>所以 <code>DEMO1</code> 中的 <code>2p</code> 符合折叠的条件，相邻且都不是浮动元素，于是它们就自然合体了。至于取最大的那个值作为折叠后的最终值，因为都是50px，所以无所谓谁谁谁了。</p><h2 id="为什么会有margin折叠这样的设计？"><a href="#为什么会有margin折叠这样的设计？" class="headerlink" title="为什么会有margin折叠这样的设计？"></a>为什么会有margin折叠这样的设计？</h2><p>从上文中，应该能知道个大概？在前面的文章中，我们说过，CSS的基本模型是排版。只是前端工程师现在做得更多的是 <code>布局</code> 而非 <code>文字排版</code>，但CSS并未界定这两者的区别。而 <code>margin</code> 折叠是为实现文本排版的段落间距而提供的特性。所以很多时候 <code>margin</code> 折叠的特性会带给我们诸多疑惑。</p><p>再回到 <code>DEMO1</code> 仔细看看，你会惊讶的发现，其实你只要设置每个 <code>p</code> 有相同的垂直外边距，由于发生会 <code>margin</code> 折叠，所有的 <code>p</code> 之间，及包含块与 <code>p</code> 之间的间隙都是相同的，非常美妙且实现简单，不是么？这正印证了我们引用 <code>CSS1</code> 中的那短话：多数情况下，折叠垂直外边距可以在视觉上显得更美观，也更贴近设计师的预期。</p><h2 id="浮动元素真的不会发生margin折叠吗？"><a href="#浮动元素真的不会发生margin折叠吗？" class="headerlink" title="浮动元素真的不会发生margin折叠吗？"></a>浮动元素真的不会发生margin折叠吗？</h2><p>质疑精神一直都是进步最重要的驱动力之一，我们为什么不能呢？改下代码看看：</p><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS:"></a>CSS:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">float</span>: left;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只改CSS代码，HTML不变。迫不及待的想看到验证情况，来吧，还等什么。<code>DEMO2</code> <a href="http://demo.doyoe.com/css/margin/float-collapse-margin.htm">验证浮动元素是否会发生margin折叠</a>。</p><p>结果告诉我们，真的没有折叠，<code>2p</code> 间的间隙足足有 <code>100px</code>。</p><p>剩下的2点大家就自行验证吧，相信你能得到满意的额测试结果。</p><h2 id="仅此而已？"><a href="#仅此而已？" class="headerlink" title="仅此而已？"></a>仅此而已？</h2><p>回想一下我们在 <a href="http://blog.doyoe.com/2013/11/30/css/margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94/">margin系列之百分比</a> 文中提到过受书写模式影响的一些特性，非常不幸，<code>margin</code> 折叠正好是其中之一。</p><p>是的，在CSS2及后续的规范中，将<code>margin</code> 折叠描述得更为详尽了。</p><p>在水平书写模式下，发生 <code>margin</code> 折叠的是垂直方向，即 <code>margin-top/margin-bottom</code>，在垂直书写模式下，<code>margin</code> 折叠发生在水平方向上，即 <code>margin-right/margin-left</code>。</p><h2 id="现在我们来解释一下到底什么是margin折叠？"><a href="#现在我们来解释一下到底什么是margin折叠？" class="headerlink" title="现在我们来解释一下到底什么是margin折叠？"></a>现在我们来解释一下到底什么是margin折叠？</h2><p>在CSS中，两个或以上的块元素（可能是兄弟，也可能不是）之间的相邻外边距可以被合并成一个单独的外边距。通过此方式合并的外边距被称为折叠，且产生的已合并的外边距被称为折叠外边距。</p><p>处于同一个块级上下文中的块元素，没有行框、没有间隙、没有内边距和边框隔开它们，这样的元素垂直边缘毗邻，则称之为相邻。</p><h3 id="什么是垂直边缘毗邻？"><a href="#什么是垂直边缘毗邻？" class="headerlink" title="什么是垂直边缘毗邻？"></a>什么是垂直边缘毗邻？</h3><ul><li>元素的上外边距和其属于常规流中的第一个孩子的上外边距。</li><li>元素的下外边距和其属于常规流中的下一个兄弟的上外边距。</li><li>属于常规流中的最后一个孩子的下外边距和其父亲的下外边距，如果其父亲的高度计算值为 <code>auto</code>。</li><li>元素的上、下外边距，如果该元素没有建立新的块级格式上下文，且 <code>min-height</code> 的计算值为零、<code>height</code> 的计算值为零或 <code>auto</code>、且没有属于常规流中的孩子。</li></ul><p>说得很清楚了，我想是的。你可能需要注意的是发生 <code>margin</code> 折叠的元素不一定是兄弟关系，也能是父子或祖先的关系。</p><h2 id="如何避免margin折叠？"><a href="#如何避免margin折叠？" class="headerlink" title="如何避免margin折叠？"></a>如何避免margin折叠？</h2><p>我想肯定有人要问，那我不想有 <code>margin</code> 折叠的情况发生，该怎么办？其实从上面的规则中，我们已经可以抽出避免 <code>margin</code> 折叠的条件来。</p><ul><li><code>margin</code> 折叠元素只发生在块元素上；</li><li>浮动元素不与其他元素 <code>margin</code> 折叠；</li><li>定义了属性overflow且值不为visible（即创建了新的块级格式化上下文）的块元素，不与它的子元素发生<code>margin</code> 折叠；</li><li>绝对定位元素的 <code>margin</code> 不与任何 <code>margin</code> 发生折叠。</li><li>特殊：根元素的 <code>margin</code> 不与其它任何 <code>margin</code> 发生折叠；</li><li>如果常规流中的一个块元素没有 <code>border-top</code>、<code>padding-top</code>，且其第一个浮动的块级子元素没有间隙，则该元素的上外边距会与其常规流中的第一个块级子元素的上外边距折叠。<br>可能有些绕，我们验证一下 <a href="http://demo.doyoe.com/css/margin/collapse-margin-verify.htm"><code>DEMO3</code></a>，在其第一个浮动子元素加个全角空格做间隙，来个反证 <a href="http://demo.doyoe.com/css/margin/collapse-margin-re-verify.htm"><code>DEMO4</code></a></li><li>如果一个元素的 <code>min-height</code> 属性为0，且没有上或下边框以及上或下内边距，且 <code>height</code> 为0或者 <code>auto</code>，且不包含行框，且其属于常规流的所有孩子的外边距都折叠了，则折叠其外边距。验证一下 <a href="http://demo.doyoe.com/css/margin/collapse-margin-verify-2.htm"><code>DEMO5</code></a></li></ul><h2 id="这样干掉margin折叠"><a href="#这样干掉margin折叠" class="headerlink" title="这样干掉margin折叠"></a>这样干掉margin折叠</h2><p>如果不想发生 <code>margin</code> 折叠，那么你可以根据上面的规则得到方法，不是么？我把它改成非块元素，让它浮动，让它绝对定位，让它 <code>overflow:hidden</code> <a href="http://demo.doyoe.com/css/margin/destroy-collapse-margin-by-overflow.htm"><code>DEMO6</code></a>，用边框隔开它们 <a href="http://demo.doyoe.com/css/margin/destroy-collapse-margin-by-border.htm"><code>DEMO7</code></a>…随你怎样，信手拈来。</p><p>今天状态不太好，有些地方写得欠妥，之后可能会修改一下。</p><p>BTW: 这篇文章里可能有不少之前文章中没出现过的名词，比如：块级上下文、行框、常规流，如果你对此不甚了解，可以先找资料看看，我以后会讲到。</p><p>enjoy it.</p><h2 id="可参考："><a href="#可参考：" class="headerlink" title="可参考："></a>可参考：</h2><ul><li><a href="http://www.w3.org/TR/css3-box/#margins">http://www.w3.org/TR/css3-box/#margins</a></li><li><a href="http://www.w3.org/TR/css3-box/#collapsing-margins">http://www.w3.org/TR/css3-box/#collapsing-margins</a></li><li><a href="http://dev.w3.org/csswg/css-box/#collapsing-margins">http://dev.w3.org/csswg/css-box/#collapsing-margins</a></li><li><a href="http://www.w3.org/TR/CSS1/#vertical-formatting">http://www.w3.org/TR/CSS1/#vertical-formatting</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w3c</tag>
      
      <tag>margin</tag>
      
      <tag>margin折叠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>margin系列之与相对偏移的异同</title>
    <link href="/2013/12/02/css/margin-xi-lie-zhi-yu-xiang-dui-pian-yi-de-yi-tong/"/>
    <url>/2013/12/02/css/margin-xi-lie-zhi-yu-xiang-dui-pian-yi-de-yi-tong/</url>
    
    <content type="html"><![CDATA[<p>本文转载自CSS大佬杜瑶的<a href="http://blog.doyoe.com/">CSS探索之旅</a></p><h2 id="也许我们是一样的"><a href="#也许我们是一样的" class="headerlink" title="也许我们是一样的"></a>也许我们是一样的</h2><p>可能大家都用会 <code>margin</code> 或者相对偏移的 <code>top, right, bottom, left</code> 来做一些类似元素偏移的事，其实我也会。这回我们只聊 <code>relative</code> 下的 <code>top, right, bottom, left</code> 。</p><p>比如说我们想让一个 div 向下偏移 50 个像素，通常会这样：</p><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1:"></a>Case 1:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span> <span class="hljs-selector-class">.margin-top</span>&#123;<br><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2:"></a>Case 2:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span> <span class="hljs-selector-class">.relative-top</span>&#123;<br><span class="hljs-attribute">position</span>:relative;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;margin-top&quot;</span>&gt;</span>我是margin-top:50px<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;relative-top&quot;</span>&gt;</span>我是relative top:50px<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述2种方式，我们都可以完成 div 向下偏移 50 个像素的需求。来看看 <code>DEMO1</code>: <a href="http://demo.doyoe.com/css/margin/margin-top-vs-relative-top.htm">margin-top vs. relative top</a></p><span id="more"></span><h2 id="其实它们真的有相似的地方"><a href="#其实它们真的有相似的地方" class="headerlink" title="其实它们真的有相似的地方"></a>其实它们真的有相似的地方</h2><p>从上面的例子，可以发现不论是 <code>margin-top</code> 还是 <code>relative top</code> 都是以自身作为参照物进行偏移的。</p><p>顺带说一下 <code>absolute</code> 偏移相对的是包含块，并且其偏移值是从包含块的 <code>padding</code> 区域开始计算。</p><h2 id="但它们真的不一样，我们来看看规范怎么说："><a href="#但它们真的不一样，我们来看看规范怎么说：" class="headerlink" title="但它们真的不一样，我们来看看规范怎么说："></a>但它们真的不一样，我们来看看规范怎么说：</h2><h3 id="margin"><a href="#margin" class="headerlink" title="margin:"></a>margin:</h3><blockquote><p>原文：Margins in CSS serve to add both horizontal and vertical space between boxes.</p></blockquote><blockquote><p>翻译：CSS中的margin用来添加盒子之间的水平和垂直间隙。</p></blockquote><h3 id="top-right-bottom-left"><a href="#top-right-bottom-left" class="headerlink" title="top, right, bottom, left:"></a>top, right, bottom, left:</h3><blockquote><p>原文：An element is said to be positioned if its ‘position’ property has a value other than ‘static’. Positioned elements generate positioned boxes, and may be laid out according to the following four physical properties: top, right, bottom, left.</p></blockquote><blockquote><p>翻译：一个元素的position属性值如果不为static则发生定位。定位元素会产生定位盒，并且会根据 top, right, bottom, left 这4个物理属性进行排版布局。</p></blockquote><p>意思很明白，<code>margin</code> 是用来增加自身与它人之间的空白，而 <code>top, right, bottom, left</code> 是用来对自身进行排版，作用完全不同。</p><p>也就是说 <code>margin</code> 是互动的，因为它要影响它人；而 <code>top, right, bottom, left </code>是孤独的，它只是自己一个人玩，不影响它人。</p><h2 id="回到之前那个例子"><a href="#回到之前那个例子" class="headerlink" title="回到之前那个例子"></a>回到之前那个例子</h2><p>在 <code>DEMO1</code> 中，我们看到2个方法都可以做到向下偏移50px，不过它们的意义不太一样。</p><p>margin的case: 让该div的顶部与其相邻的元素（这里即其包含块）留有50px的空白。</p><p>top的case: 让该div距离其包含块顶部边缘50px，因为是 <code>relative</code> ，所以这里是距离div自己的顶部边缘。</p><h2 id="我们大胆假设一下"><a href="#我们大胆假设一下" class="headerlink" title="我们大胆假设一下"></a>我们大胆假设一下</h2><p>如果我们设置 <code>margin-bottom</code> 和 <code>bottom</code> 的值也为50px，它们的表现将完全不一样，你觉得呢？ 恩，试试：</p><h3 id="Case-1-1"><a href="#Case-1-1" class="headerlink" title="Case 1:"></a>Case 1:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span> <span class="hljs-selector-class">.margin-bottom</span>&#123;<br><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Case-2-1"><a href="#Case-2-1" class="headerlink" title="Case 2:"></a>Case 2:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span> <span class="hljs-selector-class">.relative-bottom</span>&#123;<br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">bottom</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML:"></a>HTML:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;margin-bottom&quot;</span>&gt;</span>我是margin-bottom:50px<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;relative-bottom&quot;</span>&gt;</span>我是relative bottom:50px<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>验证猜想的时刻到了，来看看 <code>DEMO2</code>: <a href="http://demo.doyoe.com/css/margin/margin-bottom-vs-relative-bottom.htm">对margin-bottom和bottom的表现猜想</a></p><p>结果有出乎你的意料吗？好吧，不论怎么，解释下为什么会这样？</p><p>前面我们说过 <code>margin</code> 是用来增加自身与它人之间的间隙，所以它距包含块底部有50px，这应该能理解？那为什么 <code>bottom</code>会跑到上面去？相信仔细看了之前的描述，你应该知道。因为它要相对自己的底部边缘有50px，恩，不是-50px，所以它等于是向上偏移了50px，很简单，不是吗？</p><p>还有一个细节你注意到了吗？<code>bottom</code> 没有撑开它的包含块，仔细看看它的包含块的背景色区域。这正好也验证了之前说的 <code>top, right, bottom, left</code> 是孤独的，它只是自己一个人玩，不影响它人。</p><h2 id="孤独患者"><a href="#孤独患者" class="headerlink" title="孤独患者"></a>孤独患者</h2><p>我们将 <code>DEMO1</code> 稍改改，为其加上一点上下文，再看看结果：</p><h3 id="Case-1-2"><a href="#Case-1-2" class="headerlink" title="Case 1:"></a>Case 1:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span> <span class="hljs-selector-class">.margin-top</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Case-2-2"><a href="#Case-2-2" class="headerlink" title="Case 2:"></a>Case 2:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span> <span class="hljs-selector-class">.relative-top</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">position</span>:relative;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML:"></a>HTML:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;margin-top&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是margin-top:50px<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>我是一段随便什么上下文<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;relative-top&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是relative top:50px<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>我是一段随便什么上下文<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>迫不及待的要看看实际例子了，不是么？<code>DEMO3</code>: <a href="http://demo.doyoe.com/css/margin/margin-top-vs-relative-top-2.htm">再次验证一下top, right, bottom, left是孤独患者</a></p><p>至此可以再次说明 <code>top, right, bottom, left</code> 真的和其上下文一毛钱关系都没有，绝对的孤单患者。</p><p>所以 <code>margin</code> 和 <code>top, right, bottom, left </code> 分别要在什么场景使用，应该可以有考量的依据了，不是么？enjoy it.</p><h2 id="似乎还漏了点啥"><a href="#似乎还漏了点啥" class="headerlink" title="似乎还漏了点啥"></a>似乎还漏了点啥</h2><p>差点就这么结篇了，想起还有点遗漏的地方。</p><p>当position为relative时，如果top和bottom都是auto，则它们的计算值是0，right和left亦然；如果top和bottom其中一个为auto，则auto相当于另一个的负值，即top &#x3D; -bottom，right和left亦然；如果top和bottom的值都不为auto，则忽略bottom，如果right和left的值都不为auto，则忽略right。</p><p>好吧，不得不再写个例子：<code>DEMO4</code>: <a href="http://demo.doyoe.com/css/margin/top-right-bottom-left.htm">top, right, bottom, left详述</a></p><p>至于margin，就留给大家思考一下也不错 ^_^</p><p>enjoy it again.</p><h2 id="可参考："><a href="#可参考：" class="headerlink" title="可参考："></a>可参考：</h2><ul><li><a href="http://dev.w3.org/csswg/css-box/#the-margin-properties">http://dev.w3.org/csswg/css-box/#the-margin-properties</a></li><li><a href="http://dev.w3.org/csswg/css-position/#box-offsets-trbl">http://dev.w3.org/csswg/css-position/#box-offsets-trbl</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w3c</tag>
      
      <tag>margin</tag>
      
      <tag>margin偏移</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>margin系列之百分比</title>
    <link href="/2013/11/30/css/margin-xi-lie-zhi-bai-fen-bi/"/>
    <url>/2013/11/30/css/margin-xi-lie-zhi-bai-fen-bi/</url>
    
    <content type="html"><![CDATA[<p>本文转载自CSS大佬杜瑶的<a href="http://blog.doyoe.com/">CSS探索之旅</a></p><h2 id="你可能从没注意过它"><a href="#你可能从没注意过它" class="headerlink" title="你可能从没注意过它"></a>你可能从没注意过它</h2><p>在 [margin系列之keyword auto](<a href="http://blog.doyoe.com/2013/11/29/css/margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword">http://blog.doyoe.com/2013/11/29/css/margin系列之keyword</a> auto&#x2F;) 中，说过了 <code>margin</code> 值为 <code>auto</code> 的情况，这次要聊的是值为百分比的情形。</p><p>我必须承认这是一个非常基础的知识点，但有一段时间我发现很多人对此有错误的认知。偶尔在面试或者分享的时候，我会问到这个问题，有人会脱口而出的告诉我他对此的感性理解。</p><p>或许现在大多数人对此不屑一顾，但我仍想说一说，这样以后就可以不再问类似的问题了。</p><h2 id="假设有这样一个场景"><a href="#假设有这样一个场景" class="headerlink" title="假设有这样一个场景"></a>假设有这样一个场景</h2><p>仍然以一个问题来开始，这是我之前在 <a href="http://weibo.com/doyoe">微博</a> 发过的，原文是这样的：</p><span id="more"></span><p>假设一个块级包含容器，宽1000px，高600px，块级子元素定义 <code>margin:10% 5%;</code> 大家说说 <code>margin</code> 的 <code>top, right, bottom, left</code> 计算值最终是多少？</p><p>我记得得到不少 <code>100px 30px 100px 30px</code> 的反馈，我们来还原代码：</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;<br>&#125;<br><span class="hljs-selector-id">#demo</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">10%</span> <span class="hljs-number">5%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>恩，注意看我所在的位置。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事实告诉我们结果是 <code>100px 50px 100px 50px</code>，不论结果是否符合你的预期，我们先来看demo验证一下：<a href="//demo.doyoe.com/css/margin/percentage.htm">margin百分比结果猜想</a>，当然，你也根据上面还原的代码自己创建一个例子。</p><h2 id="为什么会这样？"><a href="#为什么会这样？" class="headerlink" title="为什么会这样？"></a>为什么会这样？</h2><p>诧异吗？不用怀疑浏览器出了问题，因为这是正确的实现。</p><p>规范中注明 <code>margin</code> 的百分比值参照其包含块的宽度进行计算。</p><p>当然，它不会这么简单，和上篇文章 keyword auto 一样，这只发生在默认的 <code>writing-mode: horizontal-tb;</code> 和 <code>direction: ltr;</code> 的情况下。</p><p>当书写模式变成纵向的时候，其参照将会变成包含块的高度。我们改变一下上面例子中的CSS书写模式：</p><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS:"></a>CSS:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span>&#123;<br>-webkit-<span class="hljs-attribute">writing-mode</span>: vertical-rl; <span class="hljs-comment">/* for browsers of webkit engine */</span><br><span class="hljs-attribute">writing-mode</span>: tb-rl; <span class="hljs-comment">/* for ie */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 #demo 中添加这2句，其它code不变。也有个例子供观：<a href="//demo.doyoe.com/css/margin/percentage2.htm">书写模式影响margin百分比的参照对象</a>。</p><p>恩，这回的结果是 <code>60px 30px 60px 30px</code> ，因为其参照对象变成了包含块的高度。</p><h2 id="顺带再说说"><a href="#顺带再说说" class="headerlink" title="顺带再说说"></a>顺带再说说</h2><p>你是否觉得这不符合常规的感性认知？感性认知更多感觉应该横向参照包含块宽度，纵向参照包含块高度。</p><p>其实这是为了要横向和纵向2个方向都创建相同的margin，如果它们的参照物不一致，那就无法得到两个方向相同的留白。</p><p>你可能会问那为什么要选择宽度做参照而不是高度呢？</p><p>这其实更多的要从CSS设计意图上去想，因为CSS的基础需求是排版，而通常我们所见的横排文字，其水平宽度一定（仔细回想一下，如果没有显式的定义宽度或者强制一行显示，都会遇到边界换行，而不是水平延展），垂直方向可以无限延展。但当书写模式为纵向时，其参照就变成了高度而不再是宽度了。</p><p>还记得我们在 <a href="http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md">margin系列之keyword auto</a> 留了个问题：为什么 <code>margin: auto;</code> 无法再纵向上垂直居中？其实原因也是上面所说的，因为纵向是可以无限延展的，所以没有一个一定的值可以被参照被用来计算。</p><h2 id="受书写模式影响的其它特性："><a href="#受书写模式影响的其它特性：" class="headerlink" title="受书写模式影响的其它特性："></a>受书写模式影响的其它特性：</h2><ul><li>margin折叠</li><li>margin的keyword auto value</li><li>padding的百分比值</li></ul><h2 id="可参考："><a href="#可参考：" class="headerlink" title="可参考："></a>可参考：</h2><ul><li><a href="http://dev.w3.org/csswg/css-box/#the-margin-properties">http://dev.w3.org/csswg/css-box/#the-margin-properties</a></li><li><a href="http://dev.w3.org/csswg/css-box/#ltpercentagegt">http://dev.w3.org/csswg/css-box/#ltpercentagegt</a></li><li><a href="http://dev.w3.org/csswg/css-box/#Calculating">http://dev.w3.org/csswg/css-box/#Calculating</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w3c</tag>
      
      <tag>margin</tag>
      
      <tag>margin百分比</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>margin系列之keyword auto</title>
    <link href="/2013/11/29/css/margin-xi-lie-zhi-keyword-auto/"/>
    <url>/2013/11/29/css/margin-xi-lie-zhi-keyword-auto/</url>
    
    <content type="html"><![CDATA[<p>本文转载自CSS大佬杜瑶的<a href="http://blog.doyoe.com/">CSS探索之旅</a></p><h2 id="margin的重要性："><a href="#margin的重要性：" class="headerlink" title="margin的重要性："></a>margin的重要性：</h2><p>有个不容置疑的事，前端开发人员没有人能够忽视CSS <code>margin</code>的重要性。CSS coding时，margin的使用频率就如同呼吸般频繁，如果我可以说得夸张点的话。</p><p>margin作为CSS盒模型基本组成要素之一，是非常Basis的一个技术手段，所以我想对于它的一些基本情况应该不用太介绍了？</p><h2 id="margin经常被用来做什么？"><a href="#margin经常被用来做什么？" class="headerlink" title="margin经常被用来做什么？"></a>margin经常被用来做什么？</h2><ul><li>让块元素水平居中；</li><li>让元素之间留有舒适的留白；</li><li>处理特殊的first或last，大家懂的？</li><li>一些布局；</li></ul><h2 id="需要注意的地方："><a href="#需要注意的地方：" class="headerlink" title="需要注意的地方："></a>需要注意的地方：</h2><ul><li>margin折叠；</li><li>margin的百分比值；</li><li>margin的auto值；</li><li>margin和相对偏移top, right, bottom, left的异同；</li><li>IE6浮动双margin Bug；</li><li>IE6浮动相邻元素3px Bug；</li></ul><p>看起来似乎有不少的知识点？恩，这些都是我们需要了解的，包括一些没有被列举出来的点。</p><p>今天要讲的其实只是其中很少的一部分，恩，标题里有：keyword auto</p><span id="more"></span><h2 id="keyword-auto"><a href="#keyword-auto" class="headerlink" title="keyword auto"></a>keyword auto</h2><p>auto是margin的可选值之一。相信大家平时使用auto值时，最多的用法大概是 <code>margin: 0 auto;</code> 和 <code>margin: auto;</code>，恩，是的，块元素水平居中。让我们来看看代码实现：</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br><span class="hljs-attribute">margin</span>: auto; <span class="hljs-comment">/* 或者 margin: 0 auto; */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>恩，我就是那个需要水平居中的家伙。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了更明显点，我们来看个例子：<a href="//demo.doyoe.com/css/margin/horizontal-center.htm">margin实现块元素水平居中</a>。Cool，这么简单就实现了水平居中。</p><p>不过你可能也发现了不论是 <code>margin: auto;</code> 还是 <code>margin: 0 auto;</code> 效果都是一样的，都是让 #demo 水平居中了，但纵向并没有任何变化。</p><p>大家都知道 <code>margin</code> 是复合属性，也就是说 <code>margin: auto;</code> 其实相当于 <code>margin: auto auto auto auto;</code>，<code>margin: 0 auto;</code>相当于 <code>margin: 0 auto 0 auto;</code>，四个值分别对应上右下左。至于CSS中的上、右、下、左顺序就不做赘述了。</p><p>根据规范，<code>margin-top: auto;</code> 和 <code>margin-bottom: auto;</code>，其计算值为0。这也就解释了为什么 <code>margin: auto;</code> 等同于 <code>margin: 0 auto;</code>。但仅此而已吗？让我们来看看规范描述：</p><blockquote><p>原文：On the A edge and C edge, the used value of ‘auto’ is 0.</p><p>翻译：如果场景是A和C，那么其 <code>auto</code> 计算值为 <code>0</code>。</p><p><img src="//demo.doyoe.com/css/margin/images/margin.png" alt="margin edge"></p><p>更详细请参阅：<a href="//dev.w3.org/csswg/css-box/#the-margin-properties">margin properties</a></p></blockquote><p>由此可见，它们还与书写模式 <code>writing-mode</code> 和 文档流方向 <code>direction</code> 有关。所以我们说 <code>margin: auto;</code> 等同于 <code>margin: 0 auto;</code> 是不太精准的，因为还有前置条件。</p><p>了解这些很重要，这有助于理解 <code>margin</code> 属性的设计意图。</p><p>OK，聊了这么多，我们回到默认的 <code>writing-mode: horizontal-tb;</code> 和 <code>direction: ltr;</code> 的情况继续往下，后面的话题都基于这个前提。</p><h2 id="为什么auto能实现水平居中？"><a href="#为什么auto能实现水平居中？" class="headerlink" title="为什么auto能实现水平居中？"></a>为什么auto能实现水平居中？</h2><p>这是因为水平方向的 <code>auto</code>，其计算值取决于可用空间（剩余空间）。</p><blockquote><p>原文：On the B edge and D edge, the used value depends on the available space.</p><p>翻译：如果场景是B和D，那么其 <code>auto</code> 计算值取决于可用空间。</p></blockquote><p>想象这样一个场景，一个宽100px的p被包含在一个宽500px的div内，此时设置 p 的 margin-left 值为 auto，大家觉得结果会怎样？</p><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS:"></a>CSS:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#demo</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>&#125;<br><span class="hljs-selector-id">#demo</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">margin-left</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML:"></a>HTML:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>恩，我就是那个p。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果你猜到了吗？没猜到也不怕，用事实说话：<a href="//demo.doyoe.com/css/margin/margin-left-auto.htm">margin-left关键字auto结果猜想</a>。</p><p>好了，结果得到了，p相对于包含块右对齐了，这与规范描述一致。<code>margin-left:auto;</code> 自动占据了包含块的可用空间，即 500 - 100px &#x3D; 400px。也就是说auto最后的计算值为400px，即 <code>margin-left:400px;</code>。所以 <code>margin-right:auto;</code> 的结果会相当于左对齐。</p><p>到这里，相信大家都知道为什么 <code>margin: auto;</code> 和 <code>margin: 0 auto;</code> 能实现水平居中了。因为左右方向的auto值均分了可用空间，使得块元素得以在包含块内居中显示。</p><p>至于垂直方向上为什么无法居中，还有更深层的原因吗？大家可以思考一下。</p><h2 id="可参考："><a href="#可参考：" class="headerlink" title="可参考："></a>可参考：</h2><ul><li><a href="http://www.w3.org/TR/css3-box/#margins">http://www.w3.org/TR/css3-box/#margins</a></li><li><a href="http://dev.w3.org/csswg/css-box/#the-margin-properties">http://dev.w3.org/csswg/css-box/#the-margin-properties</a></li><li><a href="http://dev.w3.org/csswg/css-box/#Calculating">http://dev.w3.org/csswg/css-box/#Calculating</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w3c</tag>
      
      <tag>margin</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
